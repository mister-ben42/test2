<?php

namespace MDQ\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use MDQ\UserBundle\Entity\ScUser;

/**
 * ScUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScUserRepository extends EntityRepository
{	
	public function recupUserByCrit($crit)
	{
		$tab=$this->_em->createQueryBuilder();
		$tab->select('s')
			->from('MDQUserBundle:ScUser', 's')
			->where('s.'.$crit.' IS NOT NULL')
			->leftJoin('s.usermap', 'u')
			->andwhere('u.supprime!=1')
			->andwhere('u.roles NOT LIKE :roles1')
			->andwhere('u.roles NOT LIKE :roles2')
			->setParameter('roles1', '%"ROLE_ADMIN"%')
			->setParameter('roles2', '%"ROLE_SUPER_ADMIN"%')
			->orderBy('s.'.$crit, 'DESC');
		return $tab->getQuery()
			      ->getResult();	
	}
	
	public function recupUserofDayMq(){
		$tab=$this->_em->createQueryBuilder();
		//$tab->select('s.scofDayMq','s.highClassDayMq', 's.numHighClassDayMq')
		$tab->select('s')
			->from('MDQUserBundle:ScUser', 's')
			->where('s.scofDayMq IS NOT NULL')
			->leftJoin('s.usermap', 'u')
			->where('u.supprime!=1')
			->andwhere('u.roles NOT LIKE :roles1')
			->andwhere('u.roles NOT LIKE :roles2')
			->setParameter('roles1', '%"ROLE_ADMIN"%')
			->setParameter('roles2', '%"ROLE_SUPER_ADMIN"%')
		//$tab = $this->createQueryBuilder('s')
			->orderBy('s.scofDayMq', 'DESC');
		return $tab->getQuery()
			      ->getResult();	
	}
	public function recupUserofDayQM(){
		$tab=$this->_em->createQueryBuilder();
		$tab->select('s')
			->from('MDQUserBundle:ScUser', 's')
		/*	->where('s.scofDayLx IS NOT NULL')
			->orWhere('s.scofDayAr IS NOT NULL')
			->orWhere('s.scofDayMu IS NOT NULL')
			->orWhere('s.scofDayFf IS NOT NULL')*/
			->where('s.scofDayTM IS NOT NULL')
			->leftJoin('s.usermap', 'u')
			->where('u.supprime!=1')
			->andwhere('u.roles NOT LIKE :roles1')
			->andwhere('u.roles NOT LIKE :roles2')
			->setParameter('roles1', '%"ROLE_ADMIN"%')
			->setParameter('roles2', '%"ROLE_SUPER_ADMIN"%')
			->orderBy('s.scofDayTM', 'DESC');
		return $tab->getQuery()
			      ->getResult();	
	}
	
/*	public function recupUserofMonth(){
		$tab=$this->_em->createQueryBuilder();
		//$tab->select('s.scofDayMq','s.highClassDayMq', 's.numHighClassDayMq')
		$tab->select('s')
			->from('MDQUserBundle:ScUser', 's')
			->where('s.sumtop10month IS NOT NULL')
		//$tab = $this->createQueryBuilder('s')
			->orderBy('s.sumtop10month', 'DESC');
		return $tab->getQuery()
			      ->getResult();	
	}*/
	public function recupUserofWeek(){
		$tab=$this->_em->createQueryBuilder();
		//$tab->select('s.scofDayMq','s.highClassDayMq', 's.numHighClassDayMq')
		$tab->select('s')
			->from('MDQUserBundle:ScUser', 's')
			->where('s.sumtop5weekMq IS NOT NULL')
			->leftJoin('s.usermap', 'u')
			->where('u.supprime!=1')
			->andwhere('u.roles NOT LIKE :roles1')
			->andwhere('u.roles NOT LIKE :roles2')
			->setParameter('roles1', '%"ROLE_ADMIN"%')
			->setParameter('roles2', '%"ROLE_SUPER_ADMIN"%')
		//$tab = $this->createQueryBuilder('s')
			->orderBy('s.sumtop5weekMq', 'DESC');
		return $tab->getQuery()
			      ->getResult();
	
	}
	public function recupHighScore($crit,$page,$nbparPage){
		// penser a proteger le $crit
		if ($page < 1) {
			$page=1;
		}
		$tab=$this->_em->createQueryBuilder();
		$tab->from('MDQUserBundle:ScUser', 's');
		$tab->leftJoin('s.usermap', 'u')
			->select('u.username','u.id')
			->where('u.supprime!=1')
			->andwhere('u.roles NOT LIKE :roles1')
			->andwhere('u.roles NOT LIKE :roles2')
			->setParameter('roles1', '%"ROLE_ADMIN"%')
			->setParameter('roles2', '%"ROLE_SUPER_ADMIN"%');
			 // Au tout debut, me permet de choisir ceux que j'inclus ou non (les supprime, l'admin, ...)
			
		
		if($crit=='MedMq' || $crit=='MedKm'or $crit=='MedTm' || $crit=='MedAr' || $crit=='MedFf' || $crit=='MedLx' || $crit=='MedMu')
		{
			if($crit=='MedMq'){$type='mq';$clsmt='highClassDayMq';}
			elseif($crit=='MedKm'){$type='km'; $clsmt='highClassKM';}
			elseif($crit=='MedTm'){$type='tm'; $clsmt='highClassDayTM';}
			elseif($crit=='MedAr'){$type='ar'; $clsmt='highClassDayAr';}
			elseif($crit=='MedFf'){$type='ff'; $clsmt='highClassDayFf';}
			elseif($crit=='MedLx'){$type='lx'; $clsmt='highClassDayLx';}
			elseif($crit=='MedMu'){$type='mu'; $clsmt='highClassDayMu';}
			
			$tab->addSelect('s.'.$clsmt,'s.id')
			     ->leftJoin('s.medailles', 'm')
				->addSelect('m.'.$type.'1','m.'.$type.'2','m.'.$type.'3','m.'.$type.'4','m.'.$type.'5')
				->andWhere('s.'.$clsmt.' IS NOT NULL')
				->andWhere('s.'.$clsmt.'>0');
		
			$tab->orderBy('m.'.$type.'1','DESC')
				->addOrderBy('m.'.$type.'2','DESC')
				->addOrderBy('m.'.$type.'3','DESC')
				->addOrderBy('m.'.$type.'4','DESC')
				->addOrderBy('m.'.$type.'5','DESC')
				->addOrderBy('s.'.$clsmt,'ASC')
				;				
		}
		elseif($crit=="totMed")
		{
			$tab->addSelect('s.id')
			     ->leftJoin('s.medailles', 'm')
				->addSelect('m.'.$crit)
				->andWhere('m.'.$crit.' IS NOT NULL')
				->andWhere('m.'.$crit.'>0')
				->orderBy('m.'.$crit, 'DESC');
		
		}
		else
	{
		$tab->addSelect('s.'.$crit);
			//Plus utile ce qui suit ?
			if($crit=="highClassDayMq") {$tab->addselect('s.numHighClassDayMq');}
			elseif($crit=="highClassDayTM") {$tab->addselect('s.numHighClassDayTM');}
			elseif($crit=="highClassKM"){$tab->addselect('s.numHighClassKM');}
			elseif($crit=="highClassDayAr"){$tab->addselect('s.numHighClassDayAr');}
			elseif($crit=="highClassDayFf"){$tab->addselect('s.numHighClassDayFf');}
			elseif($crit=="highClassDayLx"){$tab->addselect('s.numHighClassDayLx');}
			elseif($crit=="highClassDayMu"){$tab->addselect('s.numHighClassDayMu');}
		$tab->andWhere('s.'.$crit.'!=0')
			->andWhere('s.'.$crit.' IS NOT NULL');
			if($crit=="prctBrtotMq") {$tab->andWhere('s.nbQtotMq>99');}
			elseif($crit=="prctBrhMq") {$tab->andWhere('s.nbQhMq>50');}
			elseif($crit=="prctBrgMq") {$tab->andWhere('s.nbQgMq>50');}
			elseif($crit=="prctBrdMq") {$tab->andWhere('s.nbQdMq>50');}
			elseif($crit=="prctBralMq") {$tab->andWhere('s.nbQalMq>50');}
			elseif($crit=="prctBrslMq") {$tab->andWhere('s.nbQslMq>50');}
			elseif($crit=="prctBrsnMq") {$tab->andWhere('s.nbQsnMq>50');}
			elseif($crit=="scMoyMq") {$tab->andWhere('s.nbPMq>9');}
			elseif($crit=="ScMoyAr") {$tab->andWhere('s.nbPAr>9');}
			elseif($crit=="ScMoyLx") {$tab->andWhere('s.nbPLx>9');}
			elseif($crit=="ScMoyMu") {$tab->andWhere('s.nbPMu>9');}
			elseif($crit=="ScMoyFf") {$tab->andWhere('s.nbPFf>9');}
			elseif($crit=="nbQvalid"){$tab->andWhere('s.id!=1');}
			      
			//Plus utile les condition sur les Classements.
			if($crit=="highClassDayMq") {$tab->orderBy('s.'.$crit, 'ASC');
										$tab->addOrderBy('s.numHighClassDayMq','DESC');
			}
			elseif($crit=="highClassDayTM") {$tab->orderBy('s.'.$crit, 'ASC');
										$tab->addOrderBy('s.numHighClassDayTM','DESC');
			}
			elseif($crit=="highClassKM") {$tab->orderBy('s.'.$crit, 'ASC');
										$tab->addOrderBy('s.numHighClassKM','DESC');
			}
			elseif($crit=="highClassDayAr") {$tab->orderBy('s.'.$crit, 'ASC');
										$tab->addOrderBy('s.numHighClassDayAr','DESC');
			}
			elseif($crit=="highClassDayFf") {$tab->orderBy('s.'.$crit, 'ASC');
										$tab->addOrderBy('s.numHighClassDayFf','DESC');
			}
			elseif($crit=="highClassDayLx") {$tab->orderBy('s.'.$crit, 'ASC');
										$tab->addOrderBy('s.numHighClassDayLx','DESC');
			}
			elseif($crit=="highClassDayMu") {$tab->orderBy('s.'.$crit, 'ASC');
										$tab->addOrderBy('s.numHighClassDayMu','DESC');
			}
			else {$tab->orderBy('s.'.$crit, 'DESC');}
			$tab->addOrderBy('s.id');// Pour eviter des erreurs en cas d'aglite.
			// On definit l'article a partir duquel commencer la liste
	}
		if($nbparPage!=0)// du coup si nb par page=0: prend toutes les valeurs.
		{
			$tab->setFirstResult(($page-1) * $nbparPage)
				// Ainsi que le nombre d'articles a afficher
				->setMaxResults($nbparPage);
				// Enfin, on retourne l'objet Paginator correspondant a la requete construite
				// (n'oubliez pas le use correspondant en debut de fichier)
		}
		return $tab->getQuery()
			      ->getResult();
			
	}
	public function nbHighScore($crit)
	{
		$tab=$this->_em->createQueryBuilder();
		$tab->from('MDQUserBundle:ScUser', 's');
		$tab->leftJoin('s.usermap', 'u')
			->where('u.supprime!=1')
			->andwhere('u.roles NOT LIKE :roles1')
			->andwhere('u.roles NOT LIKE :roles2')
			->setParameter('roles1', '%"ROLE_ADMIN"%')
			->setParameter('roles2', '%"ROLE_SUPER_ADMIN"%');
		if($crit=='MedMq' || $crit=='MedKm'or $crit=='MedTm' || $crit=='MedAr' || $crit=='MedFf' || $crit=='MedLx' || $crit=='MedMu'){
			if($crit=='MedMq'){$clsmt='highClassDayMq';}
			elseif($crit=='MedKm'){$clsmt='highClassKM';}
			elseif($crit=='MedTm'){$clsmt='highClassDayTM';}
			elseif($crit=='MedAr'){$clsmt='highClassDayAr';}
			elseif($crit=='MedFf'){$clsmt='highClassDayFf';}
			elseif($crit=='MedLx'){$clsmt='highClassDayLx';}
			elseif($crit=='MedMu'){$clsmt='highClassDayMu';}
		$tab->select('s')
			->andWhere('s.'.$clsmt.' IS NOT NULL')
			->andWhere('s.'.$clsmt.'>0');
		}
		else
		{
			$tab->select('s.'.$crit)
				->andWhere('s.'.$crit.'!=0')
				->andWhere('s.'.$crit.' IS NOT NULL');
			if($crit=="prctBrtotMq") {$tab->andWhere('s.nbQtotMq>99');}
			if($crit=="ScMoyMq") {$tab->andWhere('s.nbPMq>9');}
			elseif($crit=="ScMoyTv") {$tab->andWhere('s.nbPTv>9');}
			elseif($crit=="ScMoySx") {$tab->andWhere('s.nbPSx>9');}
			elseif($crit=="ScMoyMc") {$tab->andWhere('s.nbPMc>9');}
			elseif($crit=="ScMoyEy") {$tab->andWhere('s.nbPEy>9');}
		}
		
		$tab2=$tab->getQuery()->getResult();
		
		return count($tab2);
	}
	public function getBot($djajoue)
	{
		$tab=$this->_em->createQueryBuilder();
		$tab->select('s.id')
			->from('MDQUserBundle:ScUser', 's')
			->where('s.tabCoefBot!=:N')
			->setParameter('N','N;')
			->andWhere('s.tabCoefBot IS NOT NULL');
		if($djajoue==1){$tab->andWhere('s.scofDayMq IS NULL');}
		$results=$tab->getQuery()
			      ->getResult();
		$tab2=[];$i=0;
		foreach($results as $result)
		{
			$tab2[$i]=$result['id'];
			$i++;
		}// tout ca pour n'envoyer qu'un tableau d'id.
		return $tab2;
	}
/*
	public function rangScofDay2($crit, ScUser $scUser)
	{
		if($crit=='MedMq' || $crit=='MedKm'or $crit=='MedTm' || $crit=='MedAr' || $crit=='MedFf' || $crit=='MedLx' || $crit=='MedMu'){
			/*CALCULER LE RANG POUR LES MEDAILLES
				- D'abord, ceux qui ont plus de medailles d'or,
				- Puis parmis ceux qui en ont autant, ceux qui ont plus de medaille d'argent
				- Puis parmis ceux qui ont autant d'argent et d'or, Bz
				- Idem pour Ch,
				- puis Pour Ct
				- Puis si egalite, Id.
				- Si 0 medailles, meilleur classement et si egalite : id
				
				Idee : plutot que toute cette partie, une fois que highscore tire, possibilite de 
				mettre une boucle qui passe es resultats a partir du premier, jsuqu'a arriver a celui recherche
				Si arrive au cherche : stop boucle, recuperation du rang.
				Si n'y arrive pas car pas present (arrivent au bout de la liste : range 1
				Du coup pour celui-ci, il faut plutot passer par le Gene controller.
			*/
/*			$results=['test'];
		}
		else
	{	if($crit=='scofDayMq'){$score=$scUser->getScofDayMq();}
		elseif($crit=='scTotMq'){$score=$scUser->getScTotMq();}
		elseif($crit=='sumtop10month'){$score=$scUser->getSumtop10month();}
		elseif($crit=='scMoyMq'){$score=$scUser->getScMoyMq();}
		elseif($crit=='prctBrtotMq'){$score=$scUser->getPrctBrtotMq();}
		elseif($crit=='monthHighScMq'){$score=$scUser->getMonthHighScMq();}
		elseif($crit=='scMaxMq'){$score=$scUser->getScMaxMq();}
		elseif($crit=='nbPMq'){$score=$scUser->getNbPMq();}
		elseif($crit=='highClassDayMq'){$score=$scUser->getHighClassDayMq();}
		elseif($crit=='nbBrtotMq'){$score=$scUser->getNbBrtotMq();}
		elseif($crit=='scofDaySx'){$score=$scUser->getScofDaySx();}
		elseif($crit=='scofDayTv'){$score=$scUser->getScofDayTv();}		
		elseif($crit=='scMoySx'){$score=$scUser->getScMoySx();}
		elseif($crit=='scMoyTv'){$score=$scUser->getScMoyTv();}		
		elseif($crit=='scofDayTM'){$score=$scUser->getScofDayTM();}
		elseif($crit=='scMaxTM'){$score=$scUser->getScMaxTM();}
		elseif($crit=='highClassDayTM'){$score=$scUser->getHighClassDayTM();}
		elseif($crit=='sumtop5weekMq'){$score=$scUser->getSumtop5weekMq();}
		elseif($crit=='hightop5weekMq'){$score=$scUser->getHightop5weekMq();}
		elseif($crit=='highClasstop5wMq'){$score=$scUser->getHighClasstop5wMq();}
		elseif($crit=='scofDayMu'){$score=$scUser->getScofDayMu();}
		elseif($crit=='scofDayAr'){$score=$scUser->getScofDayAr();}
		elseif($crit=='scofDayFf'){$score=$scUser->getScofDayFf();}
		elseif($crit=='scofDayLx'){$score=$scUser->getScofDayLx();}
		elseif($crit=='scMoyLx'){$score=$scUser->getScMoyLx();}
		elseif($crit=='scMoyAr'){$score=$scUser->getScMoyAr();}
		elseif($crit=='scMoyFf'){$score=$scUser->getScMoyFf();}
		elseif($crit=='scMoyMu'){$score=$scUser->getScMoyMu();}
		elseif($crit=='kingMaster'){$score=$scUser->getKingMaster();}
		$tab=$this->_em->createQueryBuilder();
		$tab->select('s.'.$crit)
			->from('MDQUserBundle:ScUser', 's')
			->where('s.'.$crit.' IS NOT NULL');
		if($crit=="prctBrtotMq") {$tab->andWhere('s.nbQtotMq>99');}
		if($crit=="ScMoyMq") {$tab->andWhere('s.nbPMq>9');}
		elseif($crit=="ScMoyAr") {$tab->andWhere('s.nbPAr>9');}
		elseif($crit=="ScMoyLx") {$tab->andWhere('s.nbPLx>9');}
		elseif($crit=="ScMoyMu") {$tab->andWhere('s.nbPMu>9');}
		elseif($crit=="ScMoyFf") {$tab->andWhere('s.nbPFf>9');}
		if($crit=="highClassDayMq") {$tab->andWhere('s.numHighClassDayMq IS NOT NULL')
									     ->andWhere('s.numHighClassDayMq >0')
										 ->andWhere('s.'.$crit.'< :score')			
										->setParameter('score',$score)
										->orderBy('s.'.$crit, 'ASC')
										->addOrderBy('s.numHighClassDayMq','DESC');
			}
		elseif($crit=="highClasstop5wMq") {$tab->andWhere('s.numHighClasstop5wMq IS NOT NULL')
									     ->andWhere('s.numHighClasstop5wMq >0')
										 ->andWhere('s.'.$crit.'< :score')			
										->setParameter('score',$score)
										->orderBy('s.'.$crit, 'ASC')
										->addOrderBy('s.numHighClasstop5wMq','DESC');
			}
		elseif($crit=="highClassDayTM") {$tab->andWhere('s.numHighClassDayTM IS NOT NULL')
									     ->andWhere('s.numHighClassDayTM >0')
										 ->andWhere('s.'.$crit.'< :score')			
										->setParameter('score',$score)
										->orderBy('s.'.$crit, 'ASC')
										->addOrderBy('s.numHighClassDayTM','DESC');
			}
		else{
		$tab->andWhere('s.'.$crit.'> :score')			
			->setParameter('score',$score)
			->orderBy('s.'.$crit, 'DESC');
			}
		$results=$tab->getQuery()->getResult();// Tous les Scores inferieurs aux score du User		  
		$tab2=$this->_em->createQueryBuilder();
		$tab2->select('s2.'.$crit)
			 ->from('MDQUserBundle:ScUser', 's2')
			 ->where('s2.'.$crit.'= :score')			
			->setParameter('score',$score);
		if($crit=="prctBrtotMq") {$tab2->andWhere('s2.nbQtotMq>99');}
		if($crit=="ScMoyMq") {$tab2->andWhere('s2.nbPMq>9');}
		if($crit=="highClassDayMq") {$tab2->andWhere('s2.numHighClassDayMq>:num')
										->setParameter('num',$scUser->getNumHighClassDayMq())
										->orderBy('s2.numHighClassDayMq','DESC');
			}
		elseif($crit=="highClasstop5wMq") {$tab2->andWhere('s2.numHighClasstop5wMq>:num')
										->setParameter('num',$scUser->getNumHighClasstop5wMq())
										->orderBy('s2.numHighClasstop5wMq','DESC');
			}
		elseif($crit=="highClassDayTM") {$tab2->andWhere('s2.numHighClassDayTM>:num')
										->setParameter('num',$scUser->getNumHighClassDayTF())
										->orderBy('s2.numHighClassDayTM','DESC');
			}
		else{
		$tab2->andWhere('s2.id< :id')			
			->setParameter('id',$scUser->getId())
			->orderBy('s2.id', 'DESC');			
			}
		
		$result2=$tab2->getQuery()->getResult();// Tous les scores egal au score user, avec un id inferieur - pour les core normaux ; pour les classement : meilleurs classement similaire, mais plus souvent.
		foreach($result2 as $res)
			{
			array_push($results,$res);
			}
		$result3=[];
		if($crit=="highClassDayMq")
			{
			$tab3=$this->_em->createQueryBuilder();
			$tab3->select('s3.'.$crit)
				->from('MDQUserBundle:ScUser', 's3')
				->where('s3.'.$crit.'= :score')			
				->setParameter('score',$score)
				->andWhere('s3.numHighClassDayMq=:num')
				->setParameter('num',$scUser->getNumHighClassDayMq())
				->andWhere('s3.id< :id')			
				->setParameter('id',$scUser->getId())
				->orderBy('s3.id', 'DESC');
			$tab3->addSelect('s3.numHighClassDayMq');// pour les tests
			$tab3->leftJoin('s3.usermap', 'u3') // A enlever ensuite, pour tester pb.
             ->addSelect('u3.username','u3.id');// test	
			$result3=$tab3->getQuery()->getResult();// Pour les classements : si classement identique et nb de fois identique, classement par id.
			foreach($result3 as $res)
				{
				array_push($results,$res);
				}
			}
		elseif($crit=="highClasstop5wMq")
			{
			$tab3=$this->_em->createQueryBuilder();
			$tab3->select('s3.'.$crit)
				->from('MDQUserBundle:ScUser', 's3')
				->where('s3.'.$crit.'= :score')			
				->setParameter('score',$score)
				->andWhere('s3.numHighClasstop5wMq=:num')
				->setParameter('num',$scUser->getNumHighClasstop5wMq())
				->andWhere('s3.id< :id')			
				->setParameter('id',$scUser->getId())
				->orderBy('s3.id', 'DESC');
			$tab3->addSelect('s3.numHighClasstop5wMq');// pour les tests
			$tab3->leftJoin('s3.usermap', 'u3') // A enlever ensuite, pour tester pb.
             ->addSelect('u3.username','u3.id');// test	
			$result3=$tab3->getQuery()->getResult();
			foreach($result3 as $res)
				{
				array_push($results,$res);
				}
			}
		elseif($crit=="highClassDayTM")
			{
			$tab3=$this->_em->createQueryBuilder();
			$tab3->select('s3.'.$crit)
				->from('MDQUserBundle:ScUser', 's3')
				->where('s3.'.$crit.'= :score')			
				->setParameter('score',$score)
				->andWhere('s3.numHighClassDayTM=:num')
				->setParameter('num',$scUser->getNumHighClassDayTF())
				->andWhere('s3.id< :id')			
				->setParameter('id',$scUser->getId())
				->orderBy('s3.id', 'DESC');
			$tab3->addSelect('s3.numHighClassDayTM');// pour les tests
			$tab3->leftJoin('s3.usermap', 'u3') // A enlever ensuite, pour tester pb.
             ->addSelect('u3.username','u3.id');// test	
			$result3=$tab3->getQuery()->getResult();
			foreach($result3 as $res)
				{
				array_push($results,$res);
				}
			}		
	}	$rang=count($results)+1;		
		return $rang;
	//	return $results;
	}*/
	public function majBddScQ($scUser, $game, $dom1, $br)
	{
			function MajStatGame($scUser, $game, $br)
			{
				if($game=='MasterQuizz')
				{
				$NbQtot=$scUser->getNbQtotMq();			
				$NbBrTot=$scUser->getNbBrtotMq();
				$scUser->setNbQtotMq($NbQtot+1);
				$NbBrTot=$NbBrTot+$br;
				$scUser->setNbBrtotMq($NbBrTot);
				$scUser->setPrctBrtotMq($NbBrTot*100/($NbQtot+1));
				}
				return;
			}
			function MajNbQ($scUser, $dom1)
			{
				if($dom1=='Histoire'){$nbQ=$scUser->getNbQhMq()+1;
										$scUser->setNbQhMq($nbQ);}
				elseif($dom1=='Géographie'){$nbQ=$scUser->getNbQgMq()+1;
										$scUser->setNbQgMq($nbQ);}
				elseif($dom1=='Divers'){$nbQ=$scUser->getNbQdMq()+1;
										$scUser->setNbQdMq($nbQ);}
				elseif($dom1=='Arts et Littérature'){$nbQ=$scUser->getNbQalMq()+1;
										$scUser->setNbQalMq($nbQ);}
				elseif($dom1=='Sports et loisirs'){$nbQ=$scUser->getNbQslMq()+1;
										$scUser->setNbQslMq($nbQ);}	
				elseif($dom1=='Sciences et nature'){$nbQ=$scUser->getNbQsnMq()+1;
										$scUser->setNbQsnMq($nbQ);}											
				elseif($dom1=='MuQuizz'){$nbQ=$scUser->getNbQMu()+1;
									$scUser->setNbQMu($nbQ);}				
				elseif($dom1=='ArQuizz'){$nbQ=$scUser->getNbQAr()+1;
										$scUser->setNbQAr($nbQ);}
				elseif($dom1=='FfQuizz'){$nbQ=$scUser->getNbQFf()+1;
										$scUser->setNbQFf($nbQ);}
				elseif($dom1=='LxQuizz'){$nbQ=$scUser->getNbQLx()+1;
										$scUser->setNbQLx($nbQ);}
				elseif($dom1=='TvQuizz'){$nbQ=$scUser->getNbQTv()+1;
										$scUser->setNbQTv($nbQ);}
				elseif($dom1=='SexyQuizz'){$nbQ=$scUser->getNbQSx()+1;
										$scUser->setNbQSx($nbQ);}								
				return $nbQ;
			}
			function MajNbBr($scUser, $dom1, $br)
			{				
				if($br==1){$scUser->setNbBrtot($scUser->getNbBrtot()+1);}
				if($dom1=='Histoire'){$nbBr=$scUser->getNbBrhMq()+$br;
									$scUser->setNbBrhMq($nbBr);}
				elseif($dom1=='Géographie'){$nbBr=$scUser->getNbBrgMq()+$br;
									$scUser->setNbBrgMq($nbBr);}
				elseif($dom1=='Divers'){$nbBr=$scUser->getNbBrdMq()+$br;
									$scUser->setNbBrdMq($nbBr);}
				elseif($dom1=='Arts et Littérature'){$nbBr=$scUser->getNbBralMq()+$br;
									$scUser->setNbBralMq($nbBr);}
				elseif($dom1=='Sports et loisirs'){$nbBr=$scUser->getNbBrslMq()+$br;
									$scUser->setNbBrslMq($nbBr);}
				elseif($dom1=='Sciences et nature'){$nbBr=$scUser->getNbBrsnMq()+$br;
									$scUser->setNbBrsnMq($nbBr);}
				elseif($dom1=='MuQuizz'){$nbBr=$scUser->getNbBrMu()+$br;
									$scUser->setNbBrMu($nbBr);}
				elseif($dom1=='ArQuizz'){$nbBr=$scUser->getNbBrAr()+$br;
									$scUser->setNbBrAr($nbBr);}
				elseif($dom1=='FfQuizz'){$nbBr=$scUser->getNbBrFf()+$br;
									$scUser->setNbBrFf($nbBr);}
				elseif($dom1=='LxQuizz'){$nbBr=$scUser->getNbBrLx()+$br;
									$scUser->setNbBrLx($nbBr);}				
				elseif($dom1=='TvQuizz'){$nbBr=$scUser->getNbBrTv()+$br;
									$scUser->setNbBrTv($nbBr);}				
				elseif($dom1=='SexyQuizz'){$nbBr=$scUser->getNbBrSx()+$br;
									$scUser->setNbBrSx($nbBr);}
				return $nbBr;
			}
			function MajPrctBr($scUser, $dom1, $nbQ, $nbBr)
			{
				if($dom1=='Histoire'){$scUser->setPrctBrhMq($nbBr*100/$nbQ);}
				elseif($dom1=='Géographie'){$scUser->setPrctBrgMq($nbBr*100/$nbQ);}
				elseif($dom1=='Divers'){$scUser->setPrctBrdMq($nbBr*100/$nbQ);}
				elseif($dom1=='Arts et Littérature'){$scUser->setPrctBralMq($nbBr*100/$nbQ);}
				elseif($dom1=='Sports et loisirs'){$scUser->setPrctBrslMq($nbBr*100/$nbQ);}
				elseif($dom1=='Sciences et nature'){$scUser->setPrctBrsnMq($nbBr*100/$nbQ);}
				elseif($dom1=='MuQuizz'){$scUser->setPrctBrMu($nbBr*100/$nbQ);}
				elseif($dom1=='ArQuizz'){$scUser->setPrctBrAr($nbBr*100/$nbQ);}
				elseif($dom1=='FfQuizz'){$scUser->setPrctBrFf($nbBr*100/$nbQ);}
				elseif($dom1=='LxQuizz'){$scUser->setPrctBrLx($nbBr*100/$nbQ);}				
				elseif($dom1=='TvQuizz'){$scUser->setPrctBrTv($nbBr*100/$nbQ);}				
				elseif($dom1=='SexyQuizz'){$scUser->setPrctBrSx($nbBr*100/$nbQ);}
				return;
			}
		if($game=='MasterQuizz'){MajStatGame($scUser, $game, $br);}
		$newnbQ=MajNbQ($scUser,$dom1);			
		$newnbBr=MajNbBr($scUser,$dom1,$br);
		MajPrctBr($scUser, $dom1, $newnbQ, $newnbBr);
		
		return 1;
	}
	
	public function majBddScfinP($scUser, $dom1, $game, $partie)
	{		
		include_once'ScUserFonctionsFinPartie.php';
		$scP=$partie->getScore();
		$partie->setValid(true);				
		$testDay=TestScDayAndWeek($scUser, $dom1, $game, $scP);
		$scTot=MajScTot($scUser, $dom1, $game, $scP);
		MajScMoy($scUser,$dom1, $game, $scTot);
		if($testDay==1)// Si meilleur score du jour
		{
			TestScMax($scUser, $dom1, $game, $scP, $partie->getDate());
			if($game=='MasterQuizz'){MajsumTop5($scUser, $scP);}
			elseif($game=='MediaQuizz'){MajTM($scUser, $dom1, $scP);}
			MajKingMaster($scUser);
		}
		return 1;
	}
	
		
	public function majClassement($tabUsers, $clsmt, $tabMaitres)
	{
		include_once'ScUserFonctionsMajQuot.php';
		$i=0;$j=0;$sc=0;$tab1[0]=null;$nbExae=0;$m=0;$n=0;//$h=0;
			//$i : variable boucle, $j: variable rang =$i sauf si egalite.
			//$sc pour gerer les situations d'egalites de score
			//$nbExae : nb de joueur exaeco - pas indispensable.
			//$m devient positif des que un user peut s'incrire dans tab1.
			//$n devient positif qd tests d'aglites termines, pour ne pas tester pour tous les joueurs suivants.
			foreach($tabUsers as $scUser){
				$i++;
				$j=testEqual($clsmt, $scUser, $i, $j, $sc);
				majHighScore($clsmt, $scUser, $j);
				if($j<11){majMedailles($clsmt, $scUser, $j);}
			//	if($i==1 && in_array($scUser, $tabMaitres)!=true){$tab1[0]=$scUser;$m=1;}
				if($m==0 && in_array($scUser, $tabMaitres)!=true){$tab1[0]=$scUser;$m=1;}
			//	elseif($j==$h && $nbExae==($i-2) && in_array($scUser, $tabMaitres)!=true){array_push($tab1,$scUser);$nbExae++;}
				elseif($m==1 && $n==0 && $j!=$i && in_array($scUser, $tabMaitres)!=true){array_push($tab1,$scUser);$nbExae++;}
			//	elseif($m==1 && $n==0 && $j!=$i && in_array($scUser, $tabMaitres)=true){$n=0;}
				elseif($m==1 && $n==0 && $j==$i){$n=1;}// Bien garder le $j==$i, comme ca si l'user est deja ans la tab maitre et que egalite de score, $n ne passe pas a 1.
				//pour les suivant, tester aussi que $scUser n'appartient pas a tabMaitres.		
		
				calcOldScore($clsmt, $scUser);
				remiseAzero($clsmt, $scUser);
				
			//	$h=$j;
			}
			$tabMaster=majTabMaitres($clsmt, $tabMaitres, $nbExae, $tab1);
			
			return $tabMaster;
		
	}
}
